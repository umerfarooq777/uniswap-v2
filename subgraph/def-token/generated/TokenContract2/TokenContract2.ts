// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _mintedLiquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _removedLiquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenSwaped extends ethereum.Event {
  get params(): TokenSwaped__Params {
    return new TokenSwaped__Params(this);
  }
}

export class TokenSwaped__Params {
  _event: TokenSwaped;

  constructor(event: TokenSwaped) {
    this._event = event;
  }

  get _swaper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenRecieved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amountRecieved(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenSent(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _amountSent(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenContract2__getPoolReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getReserve0(): BigInt {
    return this.value0;
  }

  getReserve1(): BigInt {
    return this.value1;
  }

  getBlockTimestampLast(): BigInt {
    return this.value2;
  }
}

export class TokenContract2 extends ethereum.SmartContract {
  static bind(address: Address): TokenContract2 {
    return new TokenContract2("TokenContract2", address);
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(_to: Address, _amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnPercentage(): i32 {
    let result = super.call("burnPercentage", "burnPercentage():(uint8)", []);

    return result[0].toI32();
  }

  try_burnPercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "burnPercentage",
      "burnPercentage():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  FACTORY(): Address {
    let result = super.call("FACTORY", "FACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_FACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall("FACTORY", "FACTORY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLPTokens(_LPprovider: Address): BigInt {
    let result = super.call("getLPTokens", "getLPTokens(address):(uint256)", [
      ethereum.Value.fromAddress(_LPprovider)
    ]);

    return result[0].toBigInt();
  }

  try_getLPTokens(_LPprovider: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLPTokens",
      "getLPTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_LPprovider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolAddress(): Address {
    let result = super.call("getPoolAddress", "getPoolAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getPoolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPoolAddress",
      "getPoolAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolReserves(): TokenContract2__getPoolReservesResult {
    let result = super.call(
      "getPoolReserves",
      "getPoolReserves():(uint112,uint112,uint32)",
      []
    );

    return new TokenContract2__getPoolReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getPoolReserves(): ethereum.CallResult<
    TokenContract2__getPoolReservesResult
  > {
    let result = super.tryCall(
      "getPoolReserves",
      "getPoolReserves():(uint112,uint112,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenContract2__getPoolReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getReturnAmount(_amountIn: BigInt, _tokenIn: Address): Array<BigInt> {
    let result = super.call(
      "getReturnAmount",
      "getReturnAmount(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromAddress(_tokenIn)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getReturnAmount(
    _amountIn: BigInt,
    _tokenIn: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getReturnAmount",
      "getReturnAmount(uint256,address):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromAddress(_tokenIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  taxPercentage(): i32 {
    let result = super.call("taxPercentage", "taxPercentage():(uint8)", []);

    return result[0].toI32();
  }

  try_taxPercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall("taxPercentage", "taxPercentage():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNISWAP_V2_ROUTER(): Address {
    let result = super.call(
      "UNISWAP_V2_ROUTER",
      "UNISWAP_V2_ROUTER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_UNISWAP_V2_ROUTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UNISWAP_V2_ROUTER",
      "UNISWAP_V2_ROUTER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WETH_ADDRESS(): Address {
    let result = super.call("WETH_ADDRESS", "WETH_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_WETH_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH_ADDRESS", "WETH_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddLiquidityETHToPoolCall extends ethereum.Call {
  get inputs(): AddLiquidityETHToPoolCall__Inputs {
    return new AddLiquidityETHToPoolCall__Inputs(this);
  }

  get outputs(): AddLiquidityETHToPoolCall__Outputs {
    return new AddLiquidityETHToPoolCall__Outputs(this);
  }
}

export class AddLiquidityETHToPoolCall__Inputs {
  _call: AddLiquidityETHToPoolCall;

  constructor(call: AddLiquidityETHToPoolCall) {
    this._call = call;
  }

  get _amountA(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddLiquidityETHToPoolCall__Outputs {
  _call: AddLiquidityETHToPoolCall;

  constructor(call: AddLiquidityETHToPoolCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveMaxLPTokensCall extends ethereum.Call {
  get inputs(): ApproveMaxLPTokensCall__Inputs {
    return new ApproveMaxLPTokensCall__Inputs(this);
  }

  get outputs(): ApproveMaxLPTokensCall__Outputs {
    return new ApproveMaxLPTokensCall__Outputs(this);
  }
}

export class ApproveMaxLPTokensCall__Inputs {
  _call: ApproveMaxLPTokensCall;

  constructor(call: ApproveMaxLPTokensCall) {
    this._call = call;
  }
}

export class ApproveMaxLPTokensCall__Outputs {
  _call: ApproveMaxLPTokensCall;

  constructor(call: ApproveMaxLPTokensCall) {
    this._call = call;
  }
}

export class ApproveMaxTokensCall extends ethereum.Call {
  get inputs(): ApproveMaxTokensCall__Inputs {
    return new ApproveMaxTokensCall__Inputs(this);
  }

  get outputs(): ApproveMaxTokensCall__Outputs {
    return new ApproveMaxTokensCall__Outputs(this);
  }
}

export class ApproveMaxTokensCall__Inputs {
  _call: ApproveMaxTokensCall;

  constructor(call: ApproveMaxTokensCall) {
    this._call = call;
  }
}

export class ApproveMaxTokensCall__Outputs {
  _call: ApproveMaxTokensCall;

  constructor(call: ApproveMaxTokensCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _factoryAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _v2RouterAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RemoveLiquidityETHToPoolCall extends ethereum.Call {
  get inputs(): RemoveLiquidityETHToPoolCall__Inputs {
    return new RemoveLiquidityETHToPoolCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityETHToPoolCall__Outputs {
    return new RemoveLiquidityETHToPoolCall__Outputs(this);
  }
}

export class RemoveLiquidityETHToPoolCall__Inputs {
  _call: RemoveLiquidityETHToPoolCall;

  constructor(call: RemoveLiquidityETHToPoolCall) {
    this._call = call;
  }

  get _amountLP(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveLiquidityETHToPoolCall__Outputs {
  _call: RemoveLiquidityETHToPoolCall;

  constructor(call: RemoveLiquidityETHToPoolCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBurnPercentageCall extends ethereum.Call {
  get inputs(): SetBurnPercentageCall__Inputs {
    return new SetBurnPercentageCall__Inputs(this);
  }

  get outputs(): SetBurnPercentageCall__Outputs {
    return new SetBurnPercentageCall__Outputs(this);
  }
}

export class SetBurnPercentageCall__Inputs {
  _call: SetBurnPercentageCall;

  constructor(call: SetBurnPercentageCall) {
    this._call = call;
  }

  get newFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetBurnPercentageCall__Outputs {
  _call: SetBurnPercentageCall;

  constructor(call: SetBurnPercentageCall) {
    this._call = call;
  }
}

export class SetTaxPercentageCall extends ethereum.Call {
  get inputs(): SetTaxPercentageCall__Inputs {
    return new SetTaxPercentageCall__Inputs(this);
  }

  get outputs(): SetTaxPercentageCall__Outputs {
    return new SetTaxPercentageCall__Outputs(this);
  }
}

export class SetTaxPercentageCall__Inputs {
  _call: SetTaxPercentageCall;

  constructor(call: SetTaxPercentageCall) {
    this._call = call;
  }

  get newFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetTaxPercentageCall__Outputs {
  _call: SetTaxPercentageCall;

  constructor(call: SetTaxPercentageCall) {
    this._call = call;
  }
}

export class SwapEthWithTokenCall extends ethereum.Call {
  get inputs(): SwapEthWithTokenCall__Inputs {
    return new SwapEthWithTokenCall__Inputs(this);
  }

  get outputs(): SwapEthWithTokenCall__Outputs {
    return new SwapEthWithTokenCall__Outputs(this);
  }
}

export class SwapEthWithTokenCall__Inputs {
  _call: SwapEthWithTokenCall;

  constructor(call: SwapEthWithTokenCall) {
    this._call = call;
  }
}

export class SwapEthWithTokenCall__Outputs {
  _call: SwapEthWithTokenCall;

  constructor(call: SwapEthWithTokenCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokenWithEthCall extends ethereum.Call {
  get inputs(): SwapTokenWithEthCall__Inputs {
    return new SwapTokenWithEthCall__Inputs(this);
  }

  get outputs(): SwapTokenWithEthCall__Outputs {
    return new SwapTokenWithEthCall__Outputs(this);
  }
}

export class SwapTokenWithEthCall__Inputs {
  _call: SwapTokenWithEthCall;

  constructor(call: SwapTokenWithEthCall) {
    this._call = call;
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapTokenWithEthCall__Outputs {
  _call: SwapTokenWithEthCall;

  constructor(call: SwapTokenWithEthCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class WithDrawTaxCollectionCall extends ethereum.Call {
  get inputs(): WithDrawTaxCollectionCall__Inputs {
    return new WithDrawTaxCollectionCall__Inputs(this);
  }

  get outputs(): WithDrawTaxCollectionCall__Outputs {
    return new WithDrawTaxCollectionCall__Outputs(this);
  }
}

export class WithDrawTaxCollectionCall__Inputs {
  _call: WithDrawTaxCollectionCall;

  constructor(call: WithDrawTaxCollectionCall) {
    this._call = call;
  }
}

export class WithDrawTaxCollectionCall__Outputs {
  _call: WithDrawTaxCollectionCall;

  constructor(call: WithDrawTaxCollectionCall) {
    this._call = call;
  }
}
